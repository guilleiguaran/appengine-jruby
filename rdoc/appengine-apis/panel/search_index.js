var search_data = {"index":{"longSearchIndex":["lib/appengine-apis.rb","appengine","appengine::datastore","appengine::datastore","appengine::datastore","appengine::datastore","appengine::datastore","appengine::datastore","appengine::datastore","appengine::datastore","appengine::datastore","appengine::datastore","appengine::datastore","appengine::datastore","appengine::datastore","appengine::datastore","appengine::datastore","appengine::datastore","appengine::datastore","appengine::datastore::query","appengine::datastore","appengine::datastore","appengine::datastore","appengine::datastore","appengine::datastore","appengine::datastore","appengine","appengine::labs","appengine::labs::taskqueue","appengine::labs::taskqueue","appengine::labs::taskqueue","appengine::labs::taskqueue","appengine::labs::taskqueue","appengine","appengine","appengine","appengine::memcache","appengine::memcache","appengine::memcache","appengine","appengine","appengine::urlfetch","appengine::urlfetch","appengine::urlfetch","appengine","appengine::users","appengine","appengine::xmpp","appengine::xmpp","appengine::xmpp","appengine::xmpp","appengine::xmpp","merb","net","lib/appengine-apis/tempfile.rb","lib/appengine-apis/datastore_types.rb","appengine::logger","merb::logger","appengine::datastore::entity","appengine::memcache","appengine::datastore::entity","appengine::memcache","appengine::memcache","appengine::datastore","appengine::labs::taskqueue","appengine::labs::taskqueue::queue","appengine::labs::taskqueue::task","appengine::logger","appengine::memcache","appengine::memcache","appengine::datastore::imhandle","appengine::users","appengine::datastore","appengine::datastore::query","appengine::datastore::query","appengine::testing","appengine::testing","appengine::xmpp::message","appengine::users::user","appengine::xmpp::presence","appengine::datastore","appengine::testing","appengine::memcache","tempfile","tempfile","appengine::xmpp::message","appengine::labs::taskqueue","appengine::datastore::query","appengine::datastore::query","appengine::mail","appengine::users","appengine::users","appengine::datastore","appengine::users","appengine::memcache","appengine::datastore","appengine::datastore::entity","appengine::memcache","tempfile","appengine::memcache","appengine::memcache","appengine::datastore::entity","appengine::datastore::keyrange","appengine::datastore::query","appengine::users::user","appengine::datastore::keyrange","appengine::labs::taskqueue::task","appengine::datastore::query","appengine::labs::taskqueue::task","appengine::datastore::query","appengine::urlfetch","appengine::datastore::query","appengine::datastore::query","appengine::memcache","appengine::datastore::key","appengine::datastore","appengine::memcache","appengine::testing","appengine::memcache","appengine::xmpp","appengine::datastore::entity","appengine::datastore::entity","appengine::datastore::entity","appengine::datastore::key","appengine::memcache","appengine::datastore::query","appengine::datastore::rating","appengine::memcache","appengine::testing","appengine::testing","appengine::testing","appengine::datastore::query","appengine::users::user","appengine::datastore::query","appengine::labs::taskqueue::queue","appengine::datastore::entity","appengine::datastore::query","appengine::datastore::geopt","appengine::logger","appengine::users","appengine::datastore::geopt","appengine::datastore::entity","appengine::labs::taskqueue::queue","appengine::labs::taskqueue::task","appengine::memcache","appengine::memcache","appengine::datastore::entity","appengine::datastore::entity","appengine::datastore::entity","appengine::datastore::geopt","appengine::datastore::imhandle","appengine::datastore::key","appengine::datastore::query","appengine::datastore::rating","appengine::labs::taskqueue::queue","appengine::labs::taskqueue::queue","appengine::labs::taskqueue::task","appengine::logger","appengine::memcache","appengine::users::user","appengine::xmpp::message","appengine::xmpp::presence","tempfile","appengine::datastore::blob","appengine::datastore::category","appengine::datastore::email","appengine::datastore::link","appengine::datastore::phonenumber","appengine::datastore::postaladdress","appengine::datastore::text","time","appengine::users::user","tempfile","tempfile","appengine::datastore::query","appengine::datastore::imhandle","merb::logger","appengine::datastore","appengine::labs::taskqueue::task","appengine::memcache","appengine::memcache","appengine::datastore::rating","appengine::memcache","appengine::memcache","appengine::memcache","appengine::xmpp::message","net::http","appengine::mail","appengine::xmpp","appengine::xmpp","appengine::mail","appengine::memcache","appengine::memcache","appengine::memcache","appengine::memcache","appengine::memcache","appengine::memcache","appengine::memcache","appengine::memcache","appengine::memcache","appengine::memcache","appengine::datastore::query","appengine::memcache","appengine::datastore::entity","appengine::datastore::keyrange","appengine::datastore::query","appengine::datastore::query","appengine::datastore::keyrange","appengine::memcache","appengine::datastore::entity","appengine::datastore::rating","appengine::datastore::blob","appengine::datastore::bytestring","appengine::datastore::category","appengine::datastore::email","appengine::datastore::link","appengine::datastore::phonenumber","appengine::datastore::postaladdress","appengine::datastore::text","time","appengine::datastore::key","appengine::datastore::rating","appengine::datastore","tempfile","appengine::datastore::entity","appengine::xmpp::message","files/readme_rdoc.html","files/lib/appengine-apis_rb.html","files/lib/appengine-apis/apiproxy_rb.html","files/lib/appengine-apis/datastore_rb.html","files/lib/appengine-apis/datastore_types_rb.html","files/lib/appengine-apis/labs/taskqueue_rb.html","files/lib/appengine-apis/local_boot_rb.html","files/lib/appengine-apis/logger_rb.html","files/lib/appengine-apis/mail_rb.html","files/lib/appengine-apis/memcache_rb.html","files/lib/appengine-apis/merb-logger_rb.html","files/lib/appengine-apis/sdk_rb.html","files/lib/appengine-apis/tempfile_rb.html","files/lib/appengine-apis/testing_rb.html","files/lib/appengine-apis/urlfetch_rb.html","files/lib/appengine-apis/users_rb.html","files/lib/appengine-apis/xmpp_rb.html"],"info":[["AppEngine","lib/appengine-apis.rb","classes/AppEngine.html"," < ","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",1],["Datastore","AppEngine","classes/AppEngine/Datastore.html"," < ","The Datastore provides access to a schema-less data storage system.  The fundamental unit of data in",1],["Blob","AppEngine::Datastore","classes/AppEngine/Datastore/Blob.html"," < String","A blob type, appropriate for storing binary data of any length. Not indexed. ",1],["ByteString","AppEngine::Datastore","classes/AppEngine/Datastore/ByteString.html"," < Blob","A byte-string type, appropriate for storing short amounts of indexed data. This behaves identically to",1],["Category","AppEngine::Datastore","classes/AppEngine/Datastore/Category.html"," < String","A tag, ie a descriptive word or phrase. Entities may be tagged by users, and later returned by a queries",1],["Email","AppEngine::Datastore","classes/AppEngine/Datastore/Email.html"," < String","An RFC2822 email address. Makes no attempt at validation. ",1],["Entity","AppEngine::Datastore","classes/AppEngine/Datastore/Entity.html"," < Object","Entity is the fundamental unit of data storage.  It has an immutable identifier (contained in the Key)",1],["EntityNotFound","AppEngine::Datastore","classes/AppEngine/Datastore/EntityNotFound.html"," < Error","Raised by #get when the requested entity is not found. ",1],["Error","AppEngine::Datastore","classes/AppEngine/Datastore/Error.html"," < StandardError","Base class of Datastore Errors ",1],["GeoPt","AppEngine::Datastore","classes/AppEngine/Datastore/GeoPt.html"," < Object","A geographical point, specified by float latitude and longitude coordinates. Often used to integrate",1],["IMHandle","AppEngine::Datastore","classes/AppEngine/Datastore/IMHandle.html"," < Object","An instant messaging handle. Includes both an address and its protocol. The protocol value is either",1],["InternalError","AppEngine::Datastore","classes/AppEngine/Datastore/InternalError.html"," < Error","An internal datastore error. Please report this to Google. ",1],["Key","AppEngine::Datastore","classes/AppEngine/Datastore/Key.html"," < Object","The primary key for a datastore entity. A datastore GUID. A Key instance uniquely identifies an entity",1],["KeyRange","AppEngine::Datastore","classes/AppEngine/Datastore/KeyRange.html"," < Object","Represents a range of unique datastore identifiers from start.id to end.id inclusive. The Keys returned",1],["Link","AppEngine::Datastore","classes/AppEngine/Datastore/Link.html"," < String","A fully qualified URL. Usually http: scheme, but may also be file:, ftp:, news:, among others. ",1],["NeedIndex","AppEngine::Datastore","classes/AppEngine/Datastore/NeedIndex.html"," < Error","Raised when a query requires a Composite index that does not exist ",1],["PhoneNumber","AppEngine::Datastore","classes/AppEngine/Datastore/PhoneNumber.html"," < String","A human-readable phone number.  No validation is performed because phone numbers have many different",1],["PostalAddress","AppEngine::Datastore","classes/AppEngine/Datastore/PostalAddress.html"," < String","A human-readable mailing address.  Mailing address formats vary widely so no validation is performed.",1],["Query","AppEngine::Datastore","classes/AppEngine/Datastore/Query.html"," < Object","Query encapsulates a request for zero or more Entity objects out of the datastore.  It supports querying",1],["Constants","AppEngine::Datastore::Query","classes/AppEngine/Datastore/Query/Constants.html"," < ","",1],["Rating","AppEngine::Datastore","classes/AppEngine/Datastore/Rating.html"," < Object","A user-provided integer rating for a piece of content. Normalized to a 0-100 scale. ",1],["Rollback","AppEngine::Datastore","classes/AppEngine/Datastore/Rollback.html"," < Error","May be raised during a call to #transaction to abort and rollback the transaction. Note that *any* exception",1],["Text","AppEngine::Datastore","classes/AppEngine/Datastore/Text.html"," < String","A long string type. Strings of any length can be stored in the datastore using this type. Not indexed.",1],["Timeout","AppEngine::Datastore","classes/AppEngine/Datastore/Timeout.html"," < Error","The datastore operation timed out. This can happen when you attempt to put, get, or delete too many entities",1],["TooManyResults","AppEngine::Datastore","classes/AppEngine/Datastore/TooManyResults.html"," < Error","Raised by Datastore::Query.entity if the query returns more than one entity ",1],["TransactionFailed","AppEngine::Datastore","classes/AppEngine/Datastore/TransactionFailed.html"," < Error","Raised when a transaction could not be committed, usually due to contention. ",1],["Labs","AppEngine","classes/AppEngine/Labs.html"," < ","",1],["TaskQueue","AppEngine::Labs","classes/AppEngine/Labs/TaskQueue.html"," < ","",1],["InternalError","AppEngine::Labs::TaskQueue","classes/AppEngine/Labs/TaskQueue/InternalError.html"," < StandardError","",1],["Queue","AppEngine::Labs::TaskQueue","classes/AppEngine/Labs/TaskQueue/Queue.html"," < Object","Represents a Queue. ",1],["Task","AppEngine::Labs::TaskQueue","classes/AppEngine/Labs/TaskQueue/Task.html"," < Object","Represents a single Task on a queue. ",1],["TaskAlreadyExistsError","AppEngine::Labs::TaskQueue","classes/AppEngine/Labs/TaskQueue/TaskAlreadyExistsError.html"," < StandardError","",1],["TransientFailureError","AppEngine::Labs::TaskQueue","classes/AppEngine/Labs/TaskQueue/TransientFailureError.html"," < StandardError","",1],["Logger","AppEngine","classes/AppEngine/Logger.html"," < ::Logger","Replacement for the standard logger.rb. Saves logs to the App Engine Dashboard (or to the java logging",1],["Mail","AppEngine","classes/AppEngine/Mail.html"," < ","App Engine applications can send email messages on behalf of the app's administrators, and on behalf",1],["Memcache","AppEngine","classes/AppEngine/Memcache.html"," < Object","The Ruby API for the App Engine Memcache service. This offers a fast distributed cache for commonly-used",1],["InvalidValueError","AppEngine::Memcache","classes/AppEngine/Memcache/InvalidValueError.html"," < MemcacheError","Raised when a cache entry has content, but it cannot be read. For example: - An attempt to #incr a non-integral",1],["MemcacheError","AppEngine::Memcache","classes/AppEngine/Memcache/MemcacheError.html"," < StandardError","Base Memcache exception class ",1],["ServerError","AppEngine::Memcache","classes/AppEngine/Memcache/ServerError.html"," < MemcacheError","An exception for backend non-availability or similar error states which may occur, but are not necessarily",1],["Testing","AppEngine","classes/AppEngine/Testing.html"," < ","Local testing support for Google App Engine If you run your code on Google's servers or under dev_appserver,",1],["URLFetch","AppEngine","classes/AppEngine/URLFetch.html"," < ","The URLFetch Service provides a way for user code to execute HTTP requests to external URLs. Chunked",1],["DownloadError","AppEngine::URLFetch","classes/AppEngine/URLFetch/DownloadError.html"," < StandardError","Raised if the remote service could not be contacted ",1],["InvalidURLError","AppEngine::URLFetch","classes/AppEngine/URLFetch/InvalidURLError.html"," < StandardError","Raised if the url cannot be parsed. ",1],["ResponseTooLargeError","AppEngine::URLFetch","classes/AppEngine/URLFetch/ResponseTooLargeError.html"," < StandardError","Raised if the response is too large. ",1],["Users","AppEngine","classes/AppEngine/Users.html"," < ","Users provides information useful for forcing a user to log in or out, and retrieving information about",1],["User","AppEngine::Users","classes/AppEngine/Users/User.html"," < Object","User represents a specific user, represented by the combination of an email address and a specific Google",1],["XMPP","AppEngine","classes/AppEngine/XMPP.html"," < ","The XMPP api provides an interface for accessing XMPP status information, sending XMPP messages, and",1],["Message","AppEngine::XMPP","classes/AppEngine/XMPP/Message.html"," < Object","Represents an incoming or outgoing XMPP Message. Also includes support for parsing chat commands. Commands",1],["Presence","AppEngine::XMPP","classes/AppEngine/XMPP/Presence.html"," < Object","Represents presence information returned by the server. ",1],["Proto","AppEngine::XMPP","classes/AppEngine/XMPP/Proto.html"," < ","",1],["Status","AppEngine::XMPP","classes/AppEngine/XMPP/Status.html"," < ","",1],["XMPPError","AppEngine::XMPP","classes/AppEngine/XMPP/XMPPError.html"," < StandardError","",1],["Logger","Merb","classes/Merb/Logger.html"," < Object","Modifies the Merb Logger class to save logs using the Logging API instead of writing directly to a stream.",1],["HTTP","Net","classes/Net/HTTP.html"," < Object","Monkey patch Net::HTTP to makes requests using Google App Engine's URLFetch Service. ",1],["TempFile","lib/appengine-apis/tempfile.rb","classes/TempFile.html"," < StringIO","",1],["Time","lib/appengine-apis/datastore_types.rb","classes/Time.html"," < Object","",1],["<<","AppEngine::Logger","classes/AppEngine/Logger.html#M000102","(msg)","",2],["<<","Merb::Logger","classes/Merb/Logger.html#M000123","(string = nil)","",2],["[]","AppEngine::Datastore::Entity","classes/AppEngine/Datastore/Entity.html#M000073","(name)","Alias for #get_property",2],["[]","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000119","(*keys)","Alias for #get",2],["[]=","AppEngine::Datastore::Entity","classes/AppEngine/Datastore/Entity.html#M000075","(name, value)","Alias for #set_property",2],["[]=","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000129","(*args)","Syntactic sugar for calling set_many. ",2],["active?","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000114","()","",2],["active_transactions","AppEngine::Datastore","classes/AppEngine/Datastore.html#M000009","()","Returns all Transactions started by this thread upon which no attempt to commit or rollback has been",2],["add","AppEngine::Labs::TaskQueue","classes/AppEngine/Labs/TaskQueue.html#M000099","(*args)","Convenience method will create a Task and add it to the default queue. Args: - args: Passed to the Task",2],["add","AppEngine::Labs::TaskQueue::Queue","classes/AppEngine/Labs/TaskQueue/Queue.html#M000096","(task=nil)","Submits a task to this queue. ",2],["add","AppEngine::Labs::TaskQueue::Task","classes/AppEngine/Labs/TaskQueue/Task.html#M000088","(queue=nil)","Adds this Task to a queue Args: - queue: Name of the queue where this Task should be added. (optional)",2],["add","AppEngine::Logger","classes/AppEngine/Logger.html#M000103","(severity, msg=nil, progname=nil, &block)","",2],["add","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000125","(key, value, expiration=0)","Sets a key's value, iff item is not already in memcache. Args: - key: Key to set. - value: Value to set.",2],["add_many","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000126","(pairs, expiration=0)","Set multiple keys' values iff items are not already in memcache. Args: - pairs: Hash of keys to values,",2],["address","AppEngine::Datastore::IMHandle","classes/AppEngine/Datastore/IMHandle.html#M000049","()","",2],["admin?","AppEngine::Users","classes/AppEngine/Users.html#M000182","()","Returns true if the user making this request is an admin for this application, false otherwise. This",2],["allocate_ids","AppEngine::Datastore","classes/AppEngine/Datastore.html#M000013","(*args)","Ids are allocated within a namespace defined by a parent key and a kind. This method allocates a contiguous",2],["ancestor","AppEngine::Datastore::Query","classes/AppEngine/Datastore/Query.html#M000029","()","",2],["ancestor=","AppEngine::Datastore::Query","classes/AppEngine/Datastore/Query.html#M000032","(key)","Sets an ancestor for this query. This restricts the query to only return result entities that are descended",2],["app_dir","AppEngine::Testing","classes/AppEngine/Testing.html#M000167","()","The application directory, or '.' if not set. Composite index definitions are written to \"#{app_dir}/WEB-INF/\".",2],["app_dir=","AppEngine::Testing","classes/AppEngine/Testing.html#M000168","(dir)","Sets the application directory. Should be called before creating stubs. Composite index definitions are",2],["arg","AppEngine::XMPP::Message","classes/AppEngine/XMPP/Message.html#M000193","()","If this message contains a chat command, returns the command argument. Otherwise, returns the message",2],["auth_domain","AppEngine::Users::User","classes/AppEngine/Users/User.html#M000186","()","",2],["available?","AppEngine::XMPP::Presence","classes/AppEngine/XMPP/Presence.html#M000189","()","",2],["begin_transaction","AppEngine::Datastore","classes/AppEngine/Datastore.html#M000007","()","Begins a transaction agains the datastore. Callers are responsible for explicitly calling #Transaction.commit",2],["boot","AppEngine::Testing","classes/AppEngine/Testing.html#M000172","(app_dir=nil)","Loads stub API implementations if no API implementation is currently configured. Sets up a datastore",2],["clear","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000116","()","Alias for #flush_all",2],["close","TempFile","classes/TempFile.html#M000159","(*args)","",2],["close!","TempFile","classes/TempFile.html#M000161","(*args)","Alias for #close",2],["command","AppEngine::XMPP::Message","classes/AppEngine/XMPP/Message.html#M000192","()","Returns the command if this message contains a chat command. ",2],["convert_exceptions","AppEngine::Labs::TaskQueue","classes/AppEngine/Labs/TaskQueue.html#M000100","()","",2],["convert_options","AppEngine::Datastore::Query","classes/AppEngine/Datastore/Query.html#M000062","(options)","Converts an options hash into FetchOptions. Supported options: [:limit] Maximum number of results the",2],["count","AppEngine::Datastore::Query","classes/AppEngine/Datastore/Query.html#M000045","(transaction=:current)","Returns the number of entities that currently match this query. ",2],["create_java_message","AppEngine::Mail","classes/AppEngine/Mail.html#M000108","(options)","Creates a Java MailService.Message object. Supported options: [:atttachments] Attachments to send with",2],["create_login_url","AppEngine::Users","classes/AppEngine/Users.html#M000179","(url)","Computes the login URL for this request and specified destination URL. Args: - dest_url: The desired",2],["create_logout_url","AppEngine::Users","classes/AppEngine/Users.html#M000180","(url)","Computes the logout URL for this request and specified destination URL. Args: - dest_url: String that",2],["current_transaction","AppEngine::Datastore","classes/AppEngine/Datastore.html#M000008","(*args)","Returns the current transaction for this thread. The current transaction is defined as the result of",2],["current_user","AppEngine::Users","classes/AppEngine/Users.html#M000178","()","If the user is logged in, this method will return a User that contains information about them. Note that",2],["decr","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000133","(key, delta=1)","Atomically fetches, deccrements, and stores a given integral value. \"Integral\" types are Fixnum and in",2],["delete","AppEngine::Datastore","classes/AppEngine/Datastore.html#M000006","(*args)","Deletes one or more entities from the datastore. If transaction is specified this operation will execute",2],["delete","AppEngine::Datastore::Entity","classes/AppEngine/Datastore/Entity.html#M000076","(name)","Removes any property with the specified name.  If there is no property with this name set, simply does",2],["delete","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000121","(key, time=nil)","Removes the given key from the cache, and prevents it from being added using #add for +time+ seconds",2],["delete","TempFile","classes/TempFile.html#M000162","()","Alias for #unlink",2],["delete_many","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000122","(keys, time=0)","Removes the given keys from the cache, and prevents them from being added using #add for +time+ seconds",2],["do_nothing","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000140","(*args)","For backwards compatibility. Simply returns nil ",2],["each","AppEngine::Datastore::Entity","classes/AppEngine/Datastore/Entity.html#M000081","()","Iterates over all the properties in this Entity. ",2],["each","AppEngine::Datastore::KeyRange","classes/AppEngine/Datastore/KeyRange.html#M000068","()","",2],["each","AppEngine::Datastore::Query","classes/AppEngine/Datastore/Query.html#M000051","(options={})","Streams the matching entities from the datastore and yields each matching entity. See #convert_options",2],["email","AppEngine::Users::User","classes/AppEngine/Users/User.html#M000187","()","",2],["end","AppEngine::Datastore::KeyRange","classes/AppEngine/Datastore/KeyRange.html#M000066","()","The last Key in the range. ",2],["enqueued?","AppEngine::Labs::TaskQueue::Task","classes/AppEngine/Labs/TaskQueue/Task.html#M000087","()","Returns whether this Task has been enqueued. Note: This will not check if this Task already exists in",2],["entity","AppEngine::Datastore::Query","classes/AppEngine/Datastore/Query.html#M000046","(transaction=:current)","Retrieves the one and only result for the {@code Query}. Throws TooManyResults if more than one result",2],["eta","AppEngine::Labs::TaskQueue::Task","classes/AppEngine/Labs/TaskQueue/Task.html#M000089","()","Returns the Time when this Task will execute. ",2],["fetch","AppEngine::Datastore::Query","classes/AppEngine/Datastore/Query.html#M000056","(options={})","Fetch all matching entities. For large result sets you should prefer #each or #iterator, which stream",2],["fetch","AppEngine::URLFetch","classes/AppEngine/URLFetch.html#M000164","(url, options={})","Fetches the given HTTP URL, blocking until the result is returned. Supported options: [:method] GET,",2],["filter","AppEngine::Datastore::Query","classes/AppEngine/Datastore/Query.html#M000037","(name, operator, value)","Add a filter on the specified property. Note that entities with multi-value properties identified by",2],["filter_predicates","AppEngine::Datastore::Query","classes/AppEngine/Datastore/Query.html#M000043","()","Returns an unmodifiable list of the current filter predicates. ",2],["flush_all","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000115","()","Empties the cache of all values. Statistics are not affected. Note that #clear does not respect namespaces",2],["from_path","AppEngine::Datastore::Key","classes/AppEngine/Datastore/Key.html#M000061","(parent_or_kind, kind_or_id, *args)","This is useful when an application wants to use just the 'id' portion of a key in e.g. a URL, where the",2],["get","AppEngine::Datastore","classes/AppEngine/Datastore.html#M000004","(*args)","Retrieves one or more entities from the datastore. Retrieves the entity or entities with the given key(s)",2],["get","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000118","(*keys)","Fetch and return the values associated with the given +key+s from the cache. Returns +nil+ for any value",2],["get_app_id","AppEngine::Testing","classes/AppEngine/Testing.html#M000174","(app_dir)","Looks for app.yaml or WEB-INF/appengine-web.xml in +app_dir+ and parses the application id. ",2],["get_hash","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000120","(*keys)","Looks up multiple keys from memcache in one operation. This is more efficient than multiple separate",2],["get_presence","AppEngine::XMPP","classes/AppEngine/XMPP.html#M000198","(jid, from_jid=nil)","Get the presence for a JID. Args: - jid: The JID of the contact whose presence is requested. - from_jid:",2],["get_property","AppEngine::Datastore::Entity","classes/AppEngine/Datastore/Entity.html#M000072","(name)","Returns the property with the specified name. ",2],["has_property","AppEngine::Datastore::Entity","classes/AppEngine/Datastore/Entity.html#M000078","(name)","Alias for #has_property?",2],["has_property?","AppEngine::Datastore::Entity","classes/AppEngine/Datastore/Entity.html#M000077","(name)","Returns true if a property has been set. This function can be used to test if a property has been specifically",2],["id_or_name","AppEngine::Datastore::Key","classes/AppEngine/Datastore/Key.html#M000058","()","",2],["incr","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000132","(key, delta=1)","Atomically fetches, increments, and stores a given integral value. \"Integral\" types are Fixnum and in",2],["inspect","AppEngine::Datastore::Query","classes/AppEngine/Datastore/Query.html#M000063","()","",2],["inspect","AppEngine::Datastore::Rating","classes/AppEngine/Datastore/Rating.html#M000039","()","",2],["inspect","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000137","()","",2],["install_api_stubs","AppEngine::Testing","classes/AppEngine/Testing.html#M000171","()","Install stub apis. The datastore will be written to the disk inside #app_dir. You could potentially use",2],["install_test_datastore","AppEngine::Testing","classes/AppEngine/Testing.html#M000170","()","Install stub apis and force all datastore operations to use an in-memory datastore. You may call this",2],["install_test_env","AppEngine::Testing","classes/AppEngine/Testing.html#M000165","()","Install a test environment for the current thread. You must call this before making any api calls. Note",2],["iterator","AppEngine::Datastore::Query","classes/AppEngine/Datastore/Query.html#M000052","(options={})","Returns an Enumerable over the matching entities. See #convert_options for supported options ",2],["java_new","AppEngine::Users::User","classes/AppEngine/Users/User.html#M000184","(email, auth_domain=nil)","Alias for #new",2],["java_query","AppEngine::Datastore::Query","classes/AppEngine/Datastore/Query.html#M000060","()","Returns a Java.ComGoogleAppengineApiDatastore.Query for this query. ",2],["java_queue","AppEngine::Labs::TaskQueue::Queue","classes/AppEngine/Labs/TaskQueue/Queue.html#M000098","()","",2],["java_value_to_ruby","AppEngine::Datastore::Entity","classes/AppEngine/Datastore/Entity.html#M000083","(prop)","",2],["kind","AppEngine::Datastore::Query","classes/AppEngine/Datastore/Query.html#M000028","()","",2],["latitude","AppEngine::Datastore::GeoPt","classes/AppEngine/Datastore/GeoPt.html#M000053","()","",2],["log","AppEngine::Logger","classes/AppEngine/Logger.html#M000104","(severity, msg=nil, progname=nil, &block)","Alias for #add",2],["logged_in?","AppEngine::Users","classes/AppEngine/Users.html#M000181","()","Returns true if there is a user logged in, false otherwise. ",2],["longitude","AppEngine::Datastore::GeoPt","classes/AppEngine/Datastore/GeoPt.html#M000054","()","",2],["merge!","AppEngine::Datastore::Entity","classes/AppEngine/Datastore/Entity.html#M000080","(other)","Alias for #update",2],["name","AppEngine::Labs::TaskQueue::Queue","classes/AppEngine/Labs/TaskQueue/Queue.html#M000097","()","Returns the name of this queue. ",2],["name","AppEngine::Labs::TaskQueue::Task","classes/AppEngine/Labs/TaskQueue/Task.html#M000090","()","Returns the name of this Task. Will be nil if using an auto-assigned Task name and this Task has not",2],["namespace","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000134","()","Get the name of the namespace that will be used in API calls. ",2],["namespace=","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000135","(value)","Change the namespace used in API calls. ",2],["new","AppEngine::Datastore::Entity","classes/AppEngine/Datastore/Entity.html#M000071","(key)","Create a new Entity uniquely identified by the provided Key. Creating an entity for the purpose of insertion",2],["new","AppEngine::Datastore::Entity","classes/AppEngine/Datastore/Entity.html#M000070","(kind, key_name, parent=nil)","Create a new Entity with the specified kind, key name, and parent Entity. The instantiated Entity will",2],["new","AppEngine::Datastore::Entity","classes/AppEngine/Datastore/Entity.html#M000069","(kind, parent=nil)","Create a new Entity with the specified kind and parent Entity.  The instantiated Entity will have anincomplete",2],["new","AppEngine::Datastore::GeoPt","classes/AppEngine/Datastore/GeoPt.html#M000050","(latitude, longitude)","",2],["new","AppEngine::Datastore::IMHandle","classes/AppEngine/Datastore/IMHandle.html#M000047","(protocol, address)","",2],["new","AppEngine::Datastore::Key","classes/AppEngine/Datastore/Key.html#M000059","(encoded)","Creates a new Key from an encoded String. ",2],["new","AppEngine::Datastore::Query","classes/AppEngine/Datastore/Query.html#M000023","(*args)","Creates a new Query with the specified kind and/or ancestor. Args: - kind: String. Only return entities",2],["new","AppEngine::Datastore::Rating","classes/AppEngine/Datastore/Rating.html#M000036","(rating)","Raises ArgumentError if rating < 0 or rating > 100. ",2],["new","AppEngine::Labs::TaskQueue::Queue","classes/AppEngine/Labs/TaskQueue/Queue.html#M000094","(name=nil)","Returns the named Queue, or the default queue if name is nil. The returned Queue object may not necessarily",2],["new","AppEngine::Labs::TaskQueue::Queue","classes/AppEngine/Labs/TaskQueue/Queue.html#M000095","(name=nil)","",2],["new","AppEngine::Labs::TaskQueue::Task","classes/AppEngine/Labs/TaskQueue/Task.html#M000086","(payload=nil, options={})","Initializer. All parameters are optional. Options: [:payload] The payload data for this Task that will",2],["new","AppEngine::Logger","classes/AppEngine/Logger.html#M000101","(*args)","",2],["new","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000112","(*servers)","",2],["new","AppEngine::Users::User","classes/AppEngine/Users/User.html#M000183","(email, auth_domain=nil)","Creates a new User. Args: - email: a non-nil email address. - auth_domain: an optinoal domain name into",2],["new","AppEngine::XMPP::Message","classes/AppEngine/XMPP/Message.html#M000190","(*args)","Constructor for sending an outgoing XMPP message or parsing an incoming XMPP message. Args / Options:",2],["new","AppEngine::XMPP::Presence","classes/AppEngine/XMPP/Presence.html#M000188","(available)","",2],["new","TempFile","classes/TempFile.html#M000157","(basename, tmpdir=nil)","",2],["new_from_java","AppEngine::Datastore::Blob","classes/AppEngine/Datastore/Blob.html#M000019","(blob)","",2],["new_from_java","AppEngine::Datastore::Category","classes/AppEngine/Datastore/Category.html#M000027","(category)","",2],["new_from_java","AppEngine::Datastore::Email","classes/AppEngine/Datastore/Email.html#M000025","(email)","",2],["new_from_java","AppEngine::Datastore::Link","classes/AppEngine/Datastore/Link.html#M000022","(link)","",2],["new_from_java","AppEngine::Datastore::PhoneNumber","classes/AppEngine/Datastore/PhoneNumber.html#M000031","(phone)","",2],["new_from_java","AppEngine::Datastore::PostalAddress","classes/AppEngine/Datastore/PostalAddress.html#M000035","(address)","",2],["new_from_java","AppEngine::Datastore::Text","classes/AppEngine/Datastore/Text.html#M000016","(text)","",2],["new_from_java","Time","classes/Time.html#M000012","(date)","",2],["nickname","AppEngine::Users::User","classes/AppEngine/Users/User.html#M000185","()","Return this user's nickname. The nickname will be a unique, human readable identifier for this user with",2],["open","TempFile","classes/TempFile.html#M000160","()","",2],["open","TempFile","classes/TempFile.html#M000163","(*args)","",2],["pquery","AppEngine::Datastore::Query","classes/AppEngine/Datastore/Query.html#M000057","(transaction=:current)","Returns a Java.ComGoogleAppengineApiDatastore.PreparedQuery for this query. ",2],["protocol","AppEngine::Datastore::IMHandle","classes/AppEngine/Datastore/IMHandle.html#M000048","()","",2],["push","Merb::Logger","classes/Merb/Logger.html#M000124","(string = nil)","Alias for #<<",2],["put","AppEngine::Datastore","classes/AppEngine/Datastore.html#M000005","(*args)","Store one or more entities in the datastore. The entities may be new or previously existing. For new",2],["queue","AppEngine::Labs::TaskQueue::Task","classes/AppEngine/Labs/TaskQueue/Task.html#M000091","()","Returns the name of the Queue where this Task was enqueued. ",2],["raise_errors=","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000139","(should_raise)","Set whether this client raises an exception if there's an error contacting the server. If +should_raise+",2],["raise_errors?","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000138","()","Returns whether the client raises an exception if there's an error contacting the server. By default",2],["rating","AppEngine::Datastore::Rating","classes/AppEngine/Datastore/Rating.html#M000040","()","",2],["readonly?","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000136","()","Returns true if the cache was created read-only. ",2],["replace","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000130","(key, value, expiration=0)","Replaces a key's value, failing if item isn't already in memcache. Unlike #add and #replace, this method",2],["replace_many","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000131","(pairs, expiration=0)","Replace multiple keys' values, failing if the items aren't in memcache. Args: - pairs: Hash of keys to",2],["reply","AppEngine::XMPP::Message","classes/AppEngine/XMPP/Message.html#M000194","(body, type=:chat, xml=false)","Convenience method to reply to a message. ",2],["request","Net::HTTP","classes/Net/HTTP.html#M000177","(req, body=nil, &block)","",2],["send","AppEngine::Mail","classes/AppEngine/Mail.html#M000106","(sender, to, subject, text, options={})","Sends an email. The message will be delivered asynchronously, and delivery problems will result in a",2],["send_invitation","AppEngine::XMPP","classes/AppEngine/XMPP.html#M000199","(jid, from_jid=nil)","Send a chat invitaion. Args: - jid: JID of the contact to invite. - from_jid: Optional custom sender",2],["send_message","AppEngine::XMPP","classes/AppEngine/XMPP.html#M000200","(*args)","Send a chat message. Args: - message: A Message object to send. - message_args: Used to create a new",2],["send_to_admins","AppEngine::Mail","classes/AppEngine/Mail.html#M000107","(sender, subject, text, options={})","Sends an email alert to all admins of an application. The message will be delivered asynchronously, and",2],["server_item_stats","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000141","(*args)","Alias for #do_nothing",2],["server_malloc_stats","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000142","(*args)","Alias for #do_nothing",2],["server_map_stats","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000143","(*args)","Alias for #do_nothing",2],["server_reset_stats","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000144","(*args)","Alias for #do_nothing",2],["server_size_stats","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000145","(*args)","Alias for #do_nothing",2],["server_slab_stats","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000146","(*args)","Alias for #do_nothing",2],["server_stats","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000147","(*args)","Alias for #do_nothing",2],["servers=","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000148","(*args)","Alias for #do_nothing",2],["service","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000113","()","Returns the Java MemcacheService object used by this Memcache client. ",2],["set","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000127","(key, value, expiration=0)","Sets a key's value, regardless of previous contents in cache. Unlike #add and #replace, this method always",2],["set_ancestor","AppEngine::Datastore::Query","classes/AppEngine/Datastore/Query.html#M000033","(key)","Sets an ancestor for this query. This restricts the query to only return result entities that are descended",2],["set_many","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000128","(pairs, expiration=0)","Set multiple keys' values at once, regardless of previous contents. Args: - pairs: Hash of keys to values,",2],["set_property","AppEngine::Datastore::Entity","classes/AppEngine/Datastore/Entity.html#M000074","(name, value)","Sets the property named, +name+, to +value+. As the value is stored in the datastore, it is converted",2],["size","AppEngine::Datastore::KeyRange","classes/AppEngine/Datastore/KeyRange.html#M000067","()","The size of the range. ",2],["sort","AppEngine::Datastore::Query","classes/AppEngine/Datastore/Query.html#M000042","(name, direction=ASCENDING)","Specify how the query results should be sorted. The first call to #sort will register the property that",2],["sort_predicates","AppEngine::Datastore::Query","classes/AppEngine/Datastore/Query.html#M000044","()","Returns an unmodifiable list of the current sort predicates. ",2],["start","AppEngine::Datastore::KeyRange","classes/AppEngine/Datastore/KeyRange.html#M000065","()","The first Key in the range. ",2],["stats","AppEngine::Memcache","classes/AppEngine/Memcache.html#M000117","()","Gets memcache statistics for this application. All of these statistics may reset due to various transient",2],["to_hash","AppEngine::Datastore::Entity","classes/AppEngine/Datastore/Entity.html#M000082","()","",2],["to_i","AppEngine::Datastore::Rating","classes/AppEngine/Datastore/Rating.html#M000041","()","Alias for #rating",2],["to_java","AppEngine::Datastore::Blob","classes/AppEngine/Datastore/Blob.html#M000017","()","",2],["to_java","AppEngine::Datastore::ByteString","classes/AppEngine/Datastore/ByteString.html#M000020","()","",2],["to_java","AppEngine::Datastore::Category","classes/AppEngine/Datastore/Category.html#M000026","()","",2],["to_java","AppEngine::Datastore::Email","classes/AppEngine/Datastore/Email.html#M000024","()","",2],["to_java","AppEngine::Datastore::Link","classes/AppEngine/Datastore/Link.html#M000021","()","",2],["to_java","AppEngine::Datastore::PhoneNumber","classes/AppEngine/Datastore/PhoneNumber.html#M000030","()","",2],["to_java","AppEngine::Datastore::PostalAddress","classes/AppEngine/Datastore/PostalAddress.html#M000034","()","",2],["to_java","AppEngine::Datastore::Text","classes/AppEngine/Datastore/Text.html#M000015","()","",2],["to_java","Time","classes/Time.html#M000011","()","",2],["to_s","AppEngine::Datastore::Key","classes/AppEngine/Datastore/Key.html#M000055","()","Converts a Key into a websafe string.  For example, this string can safely be used as an URL parameter",2],["to_s","AppEngine::Datastore::Rating","classes/AppEngine/Datastore/Rating.html#M000038","()","",2],["transaction","AppEngine::Datastore","classes/AppEngine/Datastore.html#M000010","(retries=3)","Runs the block inside a transaction. Every #get, #put, and #delete call in the block is made within the",2],["unlink","TempFile","classes/TempFile.html#M000158","()","",2],["update","AppEngine::Datastore::Entity","classes/AppEngine/Datastore/Entity.html#M000079","(other)","Add the properties from +other+ to this Entity. Other may be an Entity or Hash ",2],["xml?","AppEngine::XMPP::Message","classes/AppEngine/XMPP/Message.html#M000191","()","",2],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= appengine-apis  * http://code.google.com/p/appengine-jruby  == DESCRIPTION:  APIs and utilities for",3],["appengine-apis.rb","files/lib/appengine-apis_rb.html","files/lib/appengine-apis_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["apiproxy.rb","files/lib/appengine-apis/apiproxy_rb.html","files/lib/appengine-apis/apiproxy_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["datastore.rb","files/lib/appengine-apis/datastore_rb.html","files/lib/appengine-apis/datastore_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["datastore_types.rb","files/lib/appengine-apis/datastore_types_rb.html","files/lib/appengine-apis/datastore_types_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["taskqueue.rb","files/lib/appengine-apis/labs/taskqueue_rb.html","files/lib/appengine-apis/labs/taskqueue_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["local_boot.rb","files/lib/appengine-apis/local_boot_rb.html","files/lib/appengine-apis/local_boot_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["logger.rb","files/lib/appengine-apis/logger_rb.html","files/lib/appengine-apis/logger_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["mail.rb","files/lib/appengine-apis/mail_rb.html","files/lib/appengine-apis/mail_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["memcache.rb","files/lib/appengine-apis/memcache_rb.html","files/lib/appengine-apis/memcache_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["merb-logger.rb","files/lib/appengine-apis/merb-logger_rb.html","files/lib/appengine-apis/merb-logger_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["sdk.rb","files/lib/appengine-apis/sdk_rb.html","files/lib/appengine-apis/sdk_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["tempfile.rb","files/lib/appengine-apis/tempfile_rb.html","files/lib/appengine-apis/tempfile_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["testing.rb","files/lib/appengine-apis/testing_rb.html","files/lib/appengine-apis/testing_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["urlfetch.rb","files/lib/appengine-apis/urlfetch_rb.html","files/lib/appengine-apis/urlfetch_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["users.rb","files/lib/appengine-apis/users_rb.html","files/lib/appengine-apis/users_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3],["xmpp.rb","files/lib/appengine-apis/xmpp_rb.html","files/lib/appengine-apis/xmpp_rb.html","","Copyright:: Copyright 2009 Google Inc. Original Author:: Ryan Brown (mailto:ribrdb@google.com) Licensed",3]],"searchIndex":["appengine","datastore","blob","bytestring","category","email","entity","entitynotfound","error","geopt","imhandle","internalerror","key","keyrange","link","needindex","phonenumber","postaladdress","query","constants","rating","rollback","text","timeout","toomanyresults","transactionfailed","labs","taskqueue","internalerror","queue","task","taskalreadyexistserror","transientfailureerror","logger","mail","memcache","invalidvalueerror","memcacheerror","servererror","testing","urlfetch","downloaderror","invalidurlerror","responsetoolargeerror","users","user","xmpp","message","presence","proto","status","xmpperror","logger","http","tempfile","time","<<()","<<()","[]()","[]()","[]=()","[]=()","active?()","active_transactions()","add()","add()","add()","add()","add()","add_many()","address()","admin?()","allocate_ids()","ancestor()","ancestor=()","app_dir()","app_dir=()","arg()","auth_domain()","available?()","begin_transaction()","boot()","clear()","close()","close!()","command()","convert_exceptions()","convert_options()","count()","create_java_message()","create_login_url()","create_logout_url()","current_transaction()","current_user()","decr()","delete()","delete()","delete()","delete()","delete_many()","do_nothing()","each()","each()","each()","email()","end()","enqueued?()","entity()","eta()","fetch()","fetch()","filter()","filter_predicates()","flush_all()","from_path()","get()","get()","get_app_id()","get_hash()","get_presence()","get_property()","has_property()","has_property?()","id_or_name()","incr()","inspect()","inspect()","inspect()","install_api_stubs()","install_test_datastore()","install_test_env()","iterator()","java_new()","java_query()","java_queue()","java_value_to_ruby()","kind()","latitude()","log()","logged_in?()","longitude()","merge!()","name()","name()","namespace()","namespace=()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_from_java()","new_from_java()","new_from_java()","new_from_java()","new_from_java()","new_from_java()","new_from_java()","new_from_java()","nickname()","open()","open()","pquery()","protocol()","push()","put()","queue()","raise_errors=()","raise_errors?()","rating()","readonly?()","replace()","replace_many()","reply()","request()","send()","send_invitation()","send_message()","send_to_admins()","server_item_stats()","server_malloc_stats()","server_map_stats()","server_reset_stats()","server_size_stats()","server_slab_stats()","server_stats()","servers=()","service()","set()","set_ancestor()","set_many()","set_property()","size()","sort()","sort_predicates()","start()","stats()","to_hash()","to_i()","to_java()","to_java()","to_java()","to_java()","to_java()","to_java()","to_java()","to_java()","to_java()","to_s()","to_s()","transaction()","unlink()","update()","xml?()","readme.rdoc","appengine-apis.rb","apiproxy.rb","datastore.rb","datastore_types.rb","taskqueue.rb","local_boot.rb","logger.rb","mail.rb","memcache.rb","merb-logger.rb","sdk.rb","tempfile.rb","testing.rb","urlfetch.rb","users.rb","xmpp.rb"]}}